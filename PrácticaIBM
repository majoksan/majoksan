import random
import unittest

def generar_matriz(N):
    """Genera una matriz cuadrada de tamaño NxN con números aleatorios entre 0 y 9."""
    try:
        N = int(N)
        if N <= 0:
            raise ValueError
    except ValueError:
        print("Por favor, el número debe ser entero y positivo.")
        return None

    matriz = [[random.randint(0, 9) for _ in range(N)] for _ in range(N)]
    return matriz

def imprimir_matriz(matriz):
    """Imprime la matriz generada."""
    for fila in matriz:
        print(fila)

def calcular_suma(matriz):
    """Calcula la suma de los elementos de cada fila y columna."""
    suma_filas = [sum(fila) for fila in matriz]
    suma_columnas = [sum(columna) for columna in zip(*matriz)]
    return suma_filas, suma_columnas

def imprimir_suma(suma_filas, suma_columnas):
    """Imprime la suma de cada fila y columna."""
    print("Suma de filas:", suma_filas)
    print("Suma de columnas:", suma_columnas)

def main():
    N = input("Ingrese el tamaño de la matriz: ")
    matriz = generar_matriz(N)
    if matriz is not None:
        imprimir_matriz(matriz)
        suma_filas, suma_columnas = calcular_suma(matriz)
        imprimir_suma(suma_filas, suma_columnas)

if __name__ == "__main__":
    main()

class TestMatriz(unittest.TestCase):
    """Clase para realizar pruebas unitarias a las funciones del programa."""

    def test_generar_matriz(self):
        self.assertEqual(len(generar_matriz(5)), 5)
        self.assertEqual(len(generar_matriz(5)[0]), 5)
        self.assertIsNone(generar_matriz(-5))
        self.assertIsNone(generar_matriz("a"))

    def test_calcular_suma(self):
        matriz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        self.assertEqual(calcular_suma(matriz), ([6, 15, 24], [12, 15, 18]))

if __name__ == "__main__":
    unittest.main()
